; asu_gxm_maplist2scans
; Calculates emulated RATAN scans by GX-simulator-modelled radiomaps
;
; Parameters description (see also section Comments below):
;
; Parameters required (in):
;   maplist    (list)           - list of radiomaps (R/L), as it generated by GX-simulator (sfu)
;
; Parameters required (out):
;   scans      (2-D double)     - resulting scans (sfu/arcsec). 1-D - scans themselves, 2-D - frequencies
;   xarc       (1-D double)     - positions of scan points (arcsec)
;
; Parameters optional (in):
;   beam_mode  (integer)        - RATAN beam type, default = 3 (other modes will be specified)
;   scan_lim   (2-elem. real)   - limits for scan calculation (arcsec). If omitted, scan limits are the same as (maybe rotated) map limits on X-axis.
;   pos_angle  (real)           - RATAN position angle (default = 0). See asu_ratan_position_angle.pro, asu_ratan_position_angle_by_fits.pro.
;                                 If maps in 'maplist' are already rotated to the RATAN position angle, should be omitted or set to 0.
;   freqs      (1-D real)       - frequencies for scan calculation (Hz). If omitted, frequencies from the maplist will be used.
;   tolerance  (real)           - if 'freqs' defined, only frequencies whose relative difference from maplist frequencies less than 'tolerance'
;                                 will be used for scan calculation (filtered frequency set is stored in 'freq_set', see Comment (*)). default = 1d-2
;   subtr      (3-D real)       - if specified, shouild be of the same size as maps in 'maplist' (1,2-D - coordinates, 3-D - frequencies). Will be subtract
;                                 from the maps in 'maplist' before scan calculation
;
; Parameters optional (out):
;   freq_set   (1-D double)     - set of frequencies used for scan calculation. See Comment (*)
;   out_data   (3-D double)     - radiomaps to calculate scans ((1,2-D - coordinates, 3-D - frequencies)). See Comment (**) 
;   out_index  (1-D struct)     - corresponding index stuctures (for each frequency). See Comment (**)
;
; Comments:
;   (*)  If 'freqs' doesn't set, frequencies will be from the 'maplist'. 'freq_set' in this case will be the same set as in 'maplist'.
;   (**) If 'pos_angle' is omitted or zero, 'out_data', 'out_index' are the same that can be directly got from 'maplist',
;           otherwise 'out_data' is rotated maps, and 'out_index' corresponds to this rotated data (xcen, ycen, crpix1,2 recalculated).
;        If 'freqs' is set, 'out_data' and 'out_index' are filtered according selected frequencies 'freq_set'
;
; (c) Alexey G. Stupishin, Saint Petersburg State University, Saint Petersburg, Russia, 2023
;     mailto:agstup@yandex.ru
;
;--------------------------------------------------------------------------;
;             Only the Sun really knows what we want to know,              ;
;     \|/        and only the Sun has the secret.                 \|/      ;
;    --O--                                                       --O--     ;
;     /|\                                         R. Bradbury     /|\      ;
;                        "The Golden Apples of the Sun", 1953              ;
;--------------------------------------------------------------------------;
;
;-------------------------------------------------------------------------------------------------
pro asu_gxm_maplist2scans, maplist $ ; obligatory in, data R/L, sfu
                         , scans, xarc $ % obligatory out
                         , beam_mode = beam_mode, scan_lim = scan_lim $
                         , pos_angle = pos_angle, freqs = freqs, tolerance = tolerance $ ; optional in
                         , subtr = subtr $ ; optional in
                         , freq_set = freq_set, out_data = out_data, out_index = out_index ; optional out
compile_opt idl2

asu_gxm_maplist2data, maplist, data, index, freqs = freqs, freq_set = freq_set, tolerance = tolerance
asu_gxm_calc_model_data, data, index $
                       , scans, xarc $
                       , beam_mode = beam_mode, scan_lim = scan_lim, pos_angle = pos_angle $ ; optional in
                       , subtr = subtr $
                       , out_data = out_data, out_index = out_index
                       
end
