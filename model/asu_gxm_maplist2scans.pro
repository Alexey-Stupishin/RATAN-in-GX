; asu_gxm_maplist2scans
; Calculates emulated RATAN scans by GX-simulator-modelled radiomaps
;
; v 1.1.23.1213 (rev.799)
; 
; Parameters description:
;
; Parameters required:
;   maplist       (in)     (list)           - list of radiomaps (R/L), as it generated by GX-simulator (sfu)
;   scans         (out)    (2-D double)     - resulting scans (sfu/arcsec). 1-D - scans themselves, 2-D - frequencies
;   xarc          (out)    (1-D double)     - positions of scan points (arcsec)
;
; Parameters optional:
;   beam_mode     (in)     (integer)        - RATAN beam type, default = 3 (other modes will be specified)
;   scan_lim      (in)     (2-elem. real)   - limits for scan calculation (arcsec). If omitted, scan limits will be the same as (maybe rotated) map limits on X-axis.
;   pos_angle     (in)     (real)           - RATAN position angle (default = 0). See asu_ratan_position_angle.pro, asu_ratan_position_angle_by_fits.pro.
;                                             If maps in 'maplist' are already rotated to the RATAN position angle, should be omitted or set to 0.
;                                             If omitted or zero, 'out_data', 'out_index' are the same that can be directly got from 'maplist',
;                                             otherwise 'out_data' is rotated maps, and 'out_index' corresponds to this rotated data (xcen, ycen, crpix1/2 recalculated).
;   freqs         (in)     (1-D real)       - frequencies for scan calculation (Hz). If omitted, frequencies from the maplist will be used. 
;                                             'freq_set' in this case will be the same set as in 'maplist'.
;                                             If set, data will be filtered by frequency, see 'tolerance' parameter.
;   tolerance     (in)     (real)           - if 'freqs' defined, only frequencies whose relative difference from maplist frequencies less than 'tolerance'
;                                             will be used for scan calculation (filtered frequency set is stored in 'freq_set', see Comment (*)). default = 0.15d
;   subtr_mode    (in)     (integer)        - how to subtract Quiet Sun background. Possible values:
;                                              0 - no subtracting (do not recommended)
;                                              1 - by histogram (default, recommended)
;                                              2 - by prescribed values (see 'subtr_levels' parameter)
;                                              3 - by prescribed maps (see 'subtr_data' parameter)
;   subtr_levels  (in/out) (1-D real)       - if mode = 2, should be the array of the length = number of frequencis (otherwise err_code = 1 or 2 will be set). 
;                                             Those values will be subtracted from each pixel of radiomaps at corresponding frequencies.
;                                             If requested, returns values calculated according 'subtr_mode' parameter. 
;   subtr_data    (in)     (3-D real)       - if mode = 3, should be of the same size as maps in 'maplist' (1,2-D - coordinates, 3-D - frequencies).
;                                             (in case if not set or incorrect sizes err_code = 3 or 4 will be set)  
;                                             Will be subtract from the maps before scan calculation. 
;
;   freq_set      (out)    (1-D double)     - set of frequencies used for scan calculation.
;   out_data      (out)    (3-D double)     - radiomaps to calculate scans ((1,2-D - coordinates, 3-D - frequencies)). 
;   out_index     (out)    (1-D struct)     - corresponding index stuctures (for each frequency).
;   err_code      (out)    (integer)        -  0:    if everything is correct
;                                           -  1:    subtr_mode = 2 and 'subtr_level' is missed
;                                           -  2:    subtr_mode = 2 n_elements(subtr_level) is not equal to the number of frequiencies
;                                           -  3:    subtr_mode = 3 and 'subtr_data' is missed
;                                           -  4:    subtr_mode = 3 and 'subtr_data' sizes are not equal to the radiomap ones
;
; (c) Alexey G. Stupishin, Saint Petersburg State University, Saint Petersburg, Russia, 2023
;     mailto:agstup@yandex.ru
;
;--------------------------------------------------------------------------;
;             Only the Sun really knows what we want to know,              ;
;     \|/        and only the Sun has the secret.                 \|/      ;
;    --O--                                                       --O--     ;
;     /|\                                         R. Bradbury     /|\      ;
;                        "The Golden Apples of the Sun", 1953              ;
;--------------------------------------------------------------------------;
;
;-------------------------------------------------------------------------------------------------
pro asu_gxm_maplist2scans, maplist $ ; obligatory in, data R/L, sfu
                         , scans, xarc $ % obligatory out
                         , beam_mode = beam_mode, scan_lim = scan_lim $
                         , pos_angle = pos_angle, freqs = freqs, tolerance = tolerance $ ; optional in
                         , subtr_data = subtr_data $ ; optional in
                         , freq_set = freq_set, out_data = out_data, out_index = out_index ; optional out
compile_opt idl2

scans = !NULL
xarc = !NULL

err_code = 0

asu_gxm_maplist2data, maplist, data, index, freqs = freqs, freq_set = freq_set, tolerance = tolerance

default, subtr_mode, 1
if subtr_mode eq 3 then begin
    if n_elements(subtr_data) eq 0 then err_code = 3 & return
    szd = size(data)
    szs = size(subtr_data)
    if (szd[1] ne szs[1] || szd[2] ne szs[2] || szd[3] ne szs[3]) then err_code = 4 & return
endif

if subtr_mode ne 3 then data = asu_gxm_subtract_qs(data, index, mode = subtr_mode, levels = subtr_levels, err_code = err_code) ; , verbose = 1)

if err_code ne 0 then return

asu_gxm_calc_model_data, data, index $
                       , scans, xarc $
                       , beam_mode = beam_mode, scan_lim = scan_lim, pos_angle = pos_angle $ ; optional in
                       , subtr = subtr_data $
                       , out_data = out_data, out_index = out_index
                       
end
